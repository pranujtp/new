'use strict';
sap.ui.define([
    'sap/base/Log',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../utils/error',
    '../utils/version',
    '../cpe/init',
    '../utils/application',
    '../i18n',
    './quick-actions/load',
    './utils',
    './init-dialogs'
], function (log, ___sap_ux_private_control_property_editor_common, ___utils_error, ___utils_version, __init, ___utils_application, ___i18n, ___quick_actions_load, ___utils, ___init_dialogs) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    function __ui5_require_async(path) {
        return new Promise(function (resolve, reject) {
            sap.ui.require([path], function (module) {
                if (!(module && module.__esModule)) {
                    module = module === null || !(typeof module === 'object' && path.endsWith('/library')) ? { default: module } : module;
                    Object.defineProperty(module, '__esModule', { value: true });
                }
                resolve(module);
            }, function (err) {
                reject(err);
            });
        });
    }
    const showMessage = ___sap_ux_private_control_property_editor_common['showMessage'];
    const startPostMessageCommunication = ___sap_ux_private_control_property_editor_common['startPostMessageCommunication'];
    const enableTelemetry = ___sap_ux_private_control_property_editor_common['enableTelemetry'];
    const getError = ___utils_error['getError'];
    const getUi5Version = ___utils_version['getUi5Version'];
    const getUI5VersionValidationMessage = ___utils_version['getUI5VersionValidationMessage'];
    const isLowerThanMinimalUi5Version = ___utils_version['isLowerThanMinimalUi5Version'];
    const init = _interopRequireDefault(__init);
    const getApplicationType = ___utils_application['getApplicationType'];
    const getTextBundle = ___i18n['getTextBundle'];
    const loadDefinitions = ___quick_actions_load['loadDefinitions'];
    const getAllSyncViewsIds = ___utils['getAllSyncViewsIds'];
    const initDialogs = ___init_dialogs['initDialogs'];
    var __exports = async function (rta) {
        const flexSettings = rta.getFlexSettings();
        if (flexSettings.telemetry === true) {
            enableTelemetry();
        }
        const actionHandlers = [];
        function subscribe(handler) {
            actionHandlers.push(handler);
        }
        const {sendAction} = startPostMessageCommunication(window.parent, async function onAction(action) {
            for (const handler of actionHandlers) {
                try {
                    await handler(action);
                } catch (error) {
                    log.error('Handler Failed: ', getError(error));
                }
            }
        });
        const ui5VersionInfo = await getUi5Version();
        const syncViewsIds = await getAllSyncViewsIds(ui5VersionInfo);
        initDialogs(rta, syncViewsIds, ui5VersionInfo);
        if (!isLowerThanMinimalUi5Version(ui5VersionInfo, {
                major: 1,
                minor: 78
            })) {
            const ExtensionPointService = (await __ui5_require_async('open/ux/preview/client/adp/extension-point')).default;
            const extPointService = new ExtensionPointService(rta);
            extPointService.init(subscribe);
        }
        const applicationType = getApplicationType(rta.getRootControlInstance().getManifest());
        const quickActionRegistries = await loadDefinitions(applicationType);
        await init(rta, quickActionRegistries);
        if (isLowerThanMinimalUi5Version(ui5VersionInfo)) {
            sendAction(showMessage({
                message: getUI5VersionValidationMessage(ui5VersionInfo),
                shouldHideIframe: true
            }));
            return;
        }
        if (syncViewsIds.length > 0) {
            const bundle = await getTextBundle();
            sendAction(showMessage({
                message: bundle.getText('ADP_SYNC_VIEWS_MESSAGE'),
                shouldHideIframe: false
            }));
        }
        log.debug('ADP init executed.');
    };
    return __exports;
});