'use strict';
sap.ui.define([
    'sap/ui/dt/OverlayRegistry',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../../utils/version',
    '../../utils',
    '../../../cpe/quick-actions/utils',
    '../../init-dialogs',
    '../../api-handler'
], function (OverlayRegistry, ___sap_ux_private_control_property_editor_common, _____utils_version, ____utils, _____cpe_quick_actions_utils, ____init_dialogs, ____api_handler) {
    'use strict';
    const SIMPLE_QUICK_ACTION_KIND = ___sap_ux_private_control_property_editor_common['SIMPLE_QUICK_ACTION_KIND'];
    const getUi5Version = _____utils_version['getUi5Version'];
    const getAllSyncViewsIds = ____utils['getAllSyncViewsIds'];
    const getControllerInfoForControl = ____utils['getControllerInfoForControl'];
    const getRelevantControlFromActivePage = _____cpe_quick_actions_utils['getRelevantControlFromActivePage'];
    const DialogNames = ____init_dialogs['DialogNames'];
    const handler = ____init_dialogs['handler'];
    const isControllerExtensionEnabledForControl = ____init_dialogs['isControllerExtensionEnabledForControl'];
    const getExistingController = ____api_handler['getExistingController'];
    const ADD_CONTROLLER_TO_PAGE_TYPE = 'add-controller-to-page';
    const CONTROL_TYPES = [
        'sap.f.DynamicPage',
        'sap.uxap.ObjectPageLayout'
    ];
    class AddControllerToPageQuickAction {
        kind = SIMPLE_QUICK_ACTION_KIND;
        type = ADD_CONTROLLER_TO_PAGE_TYPE;
        get id() {
            return `${ this.context.key }-${ this.type }`;
        }
        isActive = false;
        controllerExists = false;
        constructor(context) {
            this.context = context;
        }
        async initialize() {
            for (const control of getRelevantControlFromActivePage(this.context.controlIndex, this.context.view, CONTROL_TYPES)) {
                const version = await getUi5Version();
                const syncViewsIds = await getAllSyncViewsIds(version);
                const controlInfo = getControllerInfoForControl(control);
                const data = await getExistingController(controlInfo.controllerName);
                this.isActive = isControllerExtensionEnabledForControl(control, syncViewsIds, version);
                this.controllerExists = data?.controllerExists;
                this.control = control;
                break;
            }
        }
        getActionObject() {
            const key = this.controllerExists ? 'QUICK_ACTION_SHOW_PAGE_CONTROLLER' : 'QUICK_ACTION_ADD_PAGE_CONTROLLER';
            return {
                kind: SIMPLE_QUICK_ACTION_KIND,
                id: this.id,
                enabled: this.isActive,
                title: this.context.resourceBundle.getText(key)
            };
        }
        async execute() {
            if (this.control) {
                const overlay = OverlayRegistry.getOverlay(this.control) || [];
                await handler(overlay, this.context.rta, DialogNames.CONTROLLER_EXTENSION);
            }
            return [];
        }
    }
    var __exports = { __esModule: true };
    __exports.ADD_CONTROLLER_TO_PAGE_TYPE = ADD_CONTROLLER_TO_PAGE_TYPE;
    __exports.AddControllerToPageQuickAction = AddControllerToPageQuickAction;
    return __exports;
});