'use strict';
sap.ui.define([
    'sap/ui/dt/OverlayUtil',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../../cpe/quick-actions/utils',
    '../../../utils/core',
    '../../../utils/version'
], function (OverlayUtil, ___sap_ux_private_control_property_editor_common, _____cpe_quick_actions_utils, _____utils_core, _____utils_version) {
    'use strict';
    const NESTED_QUICK_ACTION_KIND = ___sap_ux_private_control_property_editor_common['NESTED_QUICK_ACTION_KIND'];
    const getParentContainer = _____cpe_quick_actions_utils['getParentContainer'];
    const getRelevantControlFromActivePage = _____cpe_quick_actions_utils['getRelevantControlFromActivePage'];
    const getControlById = _____utils_core['getControlById'];
    const isA = _____utils_core['isA'];
    const isManagedObject = _____utils_core['isManagedObject'];
    const getUi5Version = _____utils_version['getUi5Version'];
    const isLowerThanMinimalUi5Version = _____utils_version['isLowerThanMinimalUi5Version'];
    const CHANGE_TABLE_COLUMNS = 'change-table-columns';
    const SMART_TABLE_ACTION_ID = 'CTX_COMP_VARIANT_CONTENT';
    const M_TABLE_ACTION_ID = 'CTX_ADD_ELEMENTS_AS_CHILD';
    const SETTINGS_ID = 'CTX_SETTINGS';
    const ICON_TAB_BAR_TYPE = 'sap.m.IconTabBar';
    const SMART_TABLE_TYPE = 'sap.ui.comp.smarttable.SmartTable';
    const M_TABLE_TYPE = 'sap.m.Table';
    const CONTROL_TYPES = [
        SMART_TABLE_TYPE,
        M_TABLE_TYPE,
        'sap.ui.table.TreeTable',
        'sap.ui.table.Table'
    ];
    async function getActionId(table) {
        const {major, minor} = await getUi5Version();
        if (isA(SMART_TABLE_TYPE, table)) {
            if (major === 1 && minor === 96) {
                return [SETTINGS_ID];
            } else {
                return [SMART_TABLE_ACTION_ID];
            }
        }
        return [
            M_TABLE_ACTION_ID,
            SETTINGS_ID
        ];
    }
    class ChangeTableColumnsQuickAction {
        kind = NESTED_QUICK_ACTION_KIND;
        type = CHANGE_TABLE_COLUMNS;
        get id() {
            return `${ this.context.key }-${ this.type }`;
        }
        isActive = false;
        isClearButtonEnabled = false;
        children = [];
        tableMap = {};
        constructor(context) {
            this.context = context;
        }
        async initialize() {
            const version = await getUi5Version();
            if (isLowerThanMinimalUi5Version(version, {
                    major: 1,
                    minor: 96
                })) {
                this.isActive = false;
                return;
            }
            const iconTabBarfilterMap = this.buildIconTabBarFilterMap();
            for (const table of getRelevantControlFromActivePage(this.context.controlIndex, this.context.view, CONTROL_TYPES)) {
                const actions = await this.context.actionService.get(table.getId());
                const actionsIds = await getActionId(table);
                const changeColumnAction = actionsIds.find(actionId => actions.findIndex(action => action.id === actionId) > -1);
                const tabKey = Object.keys(iconTabBarfilterMap).find(key => table.getId().endsWith(key));
                if (changeColumnAction) {
                    const section = getParentContainer(table, 'sap.uxap.ObjectPageSection');
                    if (section) {
                        this.collectChildrenInSection(section, table, changeColumnAction);
                    } else if (this.iconTabBar && tabKey) {
                        this.children.push({
                            label: `'${ iconTabBarfilterMap[tabKey] }' table`,
                            children: []
                        });
                        this.tableMap[`${ this.children.length - 1 }`] = {
                            table,
                            iconTabBarFilterKey: tabKey,
                            changeColumnActionId: changeColumnAction,
                            tableUpdateEventAttachedOnce: false
                        };
                    } else {
                        this.processTable(table, changeColumnAction);
                    }
                }
            }
            if (this.children.length > 0) {
                this.isActive = true;
            }
        }
        getTableLabel(table) {
            if (isA(SMART_TABLE_TYPE, table)) {
                const header = table.getHeader();
                if (header) {
                    return `'${ header }' table`;
                }
            }
            if (isA(M_TABLE_TYPE, table)) {
                const tilte = table?.getHeaderToolbar()?.getTitleControl()?.getText();
                if (tilte) {
                    return `'${ tilte }' table`;
                }
            }
            return 'Unnamed table';
        }
        buildIconTabBarFilterMap() {
            const iconTabBarfilterMap = {};
            const tabBar = getRelevantControlFromActivePage(this.context.controlIndex, this.context.view, [ICON_TAB_BAR_TYPE])[0];
            if (tabBar) {
                const control = getControlById(tabBar.getId());
                if (isA(ICON_TAB_BAR_TYPE, control)) {
                    this.iconTabBar = control;
                    for (const item of control.getItems()) {
                        if (isManagedObject(item) && isA('sap.m.IconTabFilter', item)) {
                            iconTabBarfilterMap[item.getKey()] = item.getText();
                        }
                    }
                }
            }
            return iconTabBarfilterMap;
        }
        collectChildrenInSection(section, table, changeColumnAction) {
            const layout = getParentContainer(table, 'sap.uxap.ObjectPageLayout');
            const subSections = section.getSubSections();
            const subSection = getParentContainer(table, 'sap.uxap.ObjectPageSubSection');
            if (subSection) {
                if (subSections?.length === 1) {
                    this.processTable(table, changeColumnAction, {
                        section,
                        subSection: subSections[0],
                        layout
                    });
                } else if (subSections.length > 1) {
                    const sectionChild = this.children.find(val => val.label === `${ section.getTitle() } section`);
                    let tableMapIndex = `${ this.children.length - 1 }`;
                    if (!sectionChild) {
                        tableMapIndex = `${ tableMapIndex }/0`;
                        this.children.push({
                            label: `'${ section?.getTitle() }' section`,
                            children: [{
                                    label: this.getTableLabel(table),
                                    children: []
                                }]
                        });
                    } else {
                        tableMapIndex = `${ tableMapIndex }/${ sectionChild.children.length - 1 }`;
                        sectionChild.children.push({
                            label: this.getTableLabel(table),
                            children: []
                        });
                    }
                    this.tableMap[tableMapIndex] = {
                        table,
                        changeColumnActionId: changeColumnAction,
                        sectionInfo: {
                            section,
                            subSection,
                            layout
                        },
                        tableUpdateEventAttachedOnce: false
                    };
                }
            }
        }
        processTable(table, changeColumnActionId, sectionInfo) {
            if (isA(SMART_TABLE_TYPE, table) || isA('sap.ui.table.TreeTable', table)) {
                this.children.push({
                    label: this.getTableLabel(table),
                    children: []
                });
            }
            if (isA(M_TABLE_TYPE, table)) {
                this.children.push({
                    label: this.getTableLabel(table),
                    children: []
                });
            }
            this.tableMap[`${ this.children.length - 1 }`] = {
                table,
                changeColumnActionId,
                sectionInfo: sectionInfo,
                tableUpdateEventAttachedOnce: false
            };
        }
        getActionObject() {
            return {
                kind: NESTED_QUICK_ACTION_KIND,
                id: this.id,
                enabled: this.isActive,
                title: this.context.resourceBundle.getText('V2_QUICK_ACTION_CHANGE_TABLE_COLUMNS') ?? 'Change table columns',
                children: this.children
            };
        }
        selectOverlay(table) {
            const controlOverlay = OverlayUtil.getClosestOverlayFor(table);
            if (controlOverlay) {
                controlOverlay.setSelected(true);
            }
        }
        async execute(path) {
            const {table, iconTabBarFilterKey, changeColumnActionId, sectionInfo} = this.tableMap[path];
            if (!table) {
                return [];
            }
            if (sectionInfo) {
                const {layout, section, subSection} = sectionInfo;
                layout?.setSelectedSection(section);
                section.setSelectedSubSection(subSection);
                this.selectOverlay(table);
            } else {
                getControlById(table.getId())?.getDomRef()?.scrollIntoView();
                this.selectOverlay(table);
            }
            if (this.iconTabBar && iconTabBarFilterKey) {
                this.iconTabBar.setSelectedKey(iconTabBarFilterKey);
            }
            const executeAction = async () => await this.context.actionService.execute(table.getId(), changeColumnActionId);
            if (isA(SMART_TABLE_TYPE, table)) {
                await executeAction();
            } else if (isA(M_TABLE_TYPE, table)) {
                if (this.isTableLoaded(table)) {
                    await executeAction();
                } else {
                    table.attachEventOnce('updateFinished', executeAction, this);
                }
            }
            return [];
        }
        isAbsoluteAggregationBinding(element, aggregationName) {
            const mBindingInfo = element.getBindingInfo(aggregationName);
            const path = mBindingInfo?.path;
            if (!path) {
                return false;
            }
            return path.indexOf('/') === 0;
        }
        isTableLoaded(element) {
            const aggregationName = 'items';
            if (this.isAbsoluteAggregationBinding(element, aggregationName)) {
                const bindingInfo = element.getBindingInfo(aggregationName);
                if (typeof bindingInfo.model === 'string' && bindingInfo.model !== '') {
                    return false;
                }
                return bindingInfo.path !== undefined;
            } else {
                const bindingContext = element.getBindingContext();
                return !!bindingContext;
            }
        }
    }
    var __exports = { __esModule: true };
    __exports.CHANGE_TABLE_COLUMNS = CHANGE_TABLE_COLUMNS;
    __exports.ChangeTableColumnsQuickAction = ChangeTableColumnsQuickAction;
    return __exports;
});