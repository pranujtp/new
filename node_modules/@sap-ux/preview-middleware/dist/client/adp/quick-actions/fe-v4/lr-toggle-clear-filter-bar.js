'use strict';
sap.ui.define([
    'sap/ui/rta/command/CommandFactory',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../../cpe/quick-actions/utils',
    '../../../utils/core',
    './utils'
], function (CommandFactory, ___sap_ux_private_control_property_editor_common, _____cpe_quick_actions_utils, _____utils_core, ___utils) {
    'use strict';
    const SIMPLE_QUICK_ACTION_KIND = ___sap_ux_private_control_property_editor_common['SIMPLE_QUICK_ACTION_KIND'];
    const pageHasControlId = _____cpe_quick_actions_utils['pageHasControlId'];
    const getControlById = _____utils_core['getControlById'];
    const getAppComponent = ___utils['getAppComponent'];
    const getPageName = ___utils['getPageName'];
    const getReference = ___utils['getReference'];
    const ENABLE_CLEAR_FILTER_BAR_TYPE = 'enable-clear-filter-bar';
    const PROPERTY_PATH = 'controlConfiguration/@com.sap.vocabularies.UI.v1.SelectionFields/showClearButton';
    const CONTROL_TYPE = 'sap.fe.macros.controls.FilterBar';
    class ToggleClearFilterBarQuickAction {
        kind = SIMPLE_QUICK_ACTION_KIND;
        type = ENABLE_CLEAR_FILTER_BAR_TYPE;
        forceRefreshAfterExecution = true;
        get id() {
            return `${ this.context.key }-${ this.type }`;
        }
        isActive = false;
        isClearButtonEnabled = false;
        constructor(context) {
            this.context = context;
        }
        initialize() {
            const controls = this.context.controlIndex[CONTROL_TYPE] ?? [];
            for (const control of controls) {
                const isActionApplicable = pageHasControlId(this.context.view, control.controlId);
                const filterBar = getControlById(control.controlId);
                if (isActionApplicable && filterBar) {
                    this.isActive = true;
                    this.isClearButtonEnabled = filterBar.getShowClearButton();
                }
            }
        }
        getActionObject() {
            const key = this.isClearButtonEnabled ? 'V4_QUICK_ACTION_LR_DISABLE_CLEAR_FILTER_BAR' : 'V4_QUICK_ACTION_LR_ENABLE_CLEAR_FILTER_BAR';
            return {
                kind: SIMPLE_QUICK_ACTION_KIND,
                id: this.id,
                enabled: this.isActive,
                title: this.context.resourceBundle.getText(key)
            };
        }
        async execute() {
            const controls = this.context.controlIndex[CONTROL_TYPE] ?? [];
            const control = controls[0];
            if (control) {
                const modifiedControl = getControlById(control.controlId);
                if (!modifiedControl) {
                    return [];
                }
                const {flexSettings} = this.context;
                const parent = modifiedControl.getParent();
                if (!parent) {
                    return [];
                }
                const modifiedValue = {
                    reference: getReference(modifiedControl),
                    appComponent: getAppComponent(modifiedControl),
                    changeType: 'appdescr_fe_changePageConfiguration',
                    parameters: {
                        page: getPageName(parent),
                        entityPropertyChange: {
                            propertyPath: PROPERTY_PATH,
                            propertyValue: !this.isClearButtonEnabled,
                            operation: 'UPSERT'
                        }
                    }
                };
                const command = await CommandFactory.getCommandFor(modifiedControl, 'appDescriptor', modifiedValue, null, flexSettings);
                this.isClearButtonEnabled = !this.isClearButtonEnabled;
                return [command];
            }
            return [];
        }
    }
    var __exports = { __esModule: true };
    __exports.ENABLE_CLEAR_FILTER_BAR_TYPE = ENABLE_CLEAR_FILTER_BAR_TYPE;
    __exports.ToggleClearFilterBarQuickAction = ToggleClearFilterBarQuickAction;
    return __exports;
});